{
  "info": {
    "_postman_id": "8dd6ea20-2d70-4efe-80f8-4457fd7dd524",
    "name": "modul3",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27733445"
  },
  "item": [
    {
      "name": "Comments",
      "item": [
        {
          "name": "Позитивные тесты",
          "item": [
            {
              "name": "Добавление нового события",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    let event;\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"uid\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        event = rnd.getEvent(category.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "\r",
                      "    pm.request.body.update({\r",
                      "        mode: 'raw',\r",
                      "        raw: JSON.stringify(event),\r",
                      "        options: { raw: { language: 'json' } }\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(201);  \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = JSON.parse(pm.request.body.raw);\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
                      "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                      "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                      "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                      "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
                      "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
                      "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
                      "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
                      "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}",
                      "description": "(Required) id текущего пользователя"
                    }
                  ]
                },
                "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
              },
              "response": []
            },
            {
              "name": "(Юзер)Создание комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is a valid JSON object\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has properties id, text, userId, eventId, isDeleted, created, and updated\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('id');\r",
                      "    pm.expect(jsonData).to.have.property('text');\r",
                      "    pm.expect(jsonData).to.have.property('userId');\r",
                      "    pm.expect(jsonData).to.have.property('eventId');\r",
                      "    pm.expect(jsonData).to.have.property('isDeleted');\r",
                      "    pm.expect(jsonData).to.have.property('created');\r",
                      "    pm.expect(jsonData).to.have.property('updated');\r",
                      "});\r",
                      "\r",
                      "let commentId = JSON.parse(responseBody).id;\r",
                      "pm.collectionVariables.set('commentId', commentId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_20 букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/events/1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    "events",
                    "1"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Юзер)Апдейт комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an object with specific properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.be.an('object');\r",
                      "    pm.expect(jsonData).to.have.property('id');\r",
                      "    pm.expect(jsonData).to.have.property('text');\r",
                      "    pm.expect(jsonData).to.have.property('userId');\r",
                      "    pm.expect(jsonData).to.have.property('eventId');\r",
                      "    pm.expect(jsonData).to.have.property('isDeleted');\r",
                      "    pm.expect(jsonData).to.have.property('created');\r",
                      "    pm.expect(jsonData).to.have.property('updated');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/3",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    "3"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Юзер)Удаление комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 204\", function () {\r",
                      "    pm.response.to.have.status(204);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has no content\", function () {\r",
                      "    pm.expect(pm.response.text()).to.be.empty;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/{{commentId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    "{{commentId}}"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Юзер)Создание запасного комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is a valid JSON object\", function () {\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response has properties id, text, userId, eventId, isDeleted, created, and updated\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.have.property('id');\r",
                      "    pm.expect(jsonData).to.have.property('text');\r",
                      "    pm.expect(jsonData).to.have.property('userId');\r",
                      "    pm.expect(jsonData).to.have.property('eventId');\r",
                      "    pm.expect(jsonData).to.have.property('isDeleted');\r",
                      "    pm.expect(jsonData).to.have.property('created');\r",
                      "    pm.expect(jsonData).to.have.property('updated');\r",
                      "});\r",
                      "\r",
                      "let commentId = JSON.parse(responseBody).id;\r",
                      "pm.collectionVariables.set('commentId', commentId);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_20 букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/events/1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    "events",
                    "1"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Юзер)Получение всех неудаленных комментария юзера",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array of objects\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
                      "    pm.response.json().forEach(function(comment) {\r",
                      "        pm.expect(comment).to.be.an('object');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Each comment object has required properties\", function () {\r",
                      "    pm.response.json().forEach(function(comment) {\r",
                      "        pm.expect(comment).to.have.property('id');\r",
                      "        pm.expect(comment).to.have.property('text');\r",
                      "        pm.expect(comment).to.have.property('userId');\r",
                      "        pm.expect(comment).to.have.property('eventId');\r",
                      "        pm.expect(comment).to.have.property('isDeleted');\r",
                      "        pm.expect(comment).to.have.property('created');\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/?from=0&size=24",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    ""
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "24"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Админ) Получение всех комментариев пользователя.",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array of objects with specific properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.be.an('array');\r",
                      "    jsonData.forEach(function(comment) {\r",
                      "        pm.expect(comment).to.have.property('id');\r",
                      "        pm.expect(comment).to.have.property('text');\r",
                      "        pm.expect(comment).to.have.property('created');\r",
                      "        pm.expect(comment).to.have.property('userId');\r",
                      "        pm.expect(comment).to.have.property('eventId');\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/user/1?from=0&size=24",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    "user",
                    "1"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "0"
                    },
                    {
                      "key": "size",
                      "value": "24"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Админ) Получение комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array of objects with specific properties\", function () {\r",
                      "    var jsonData = pm.response.json();\r",
                      "    pm.expect(jsonData).to.be.an('array');\r",
                      "    jsonData.forEach(function(comment) {\r",
                      "        pm.expect(comment).to.have.property('id');\r",
                      "        pm.expect(comment).to.have.property('text');\r",
                      "        pm.expect(comment).to.have.property('created');\r",
                      "        pm.expect(comment).to.have.property('userId');\r",
                      "        pm.expect(comment).to.have.property('eventId');\r",
                      "    });\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/admin/comments/1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "comments",
                    "1"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Паблик) Получение комментариев по ивенту",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an array of objects\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
                      "    pm.response.json().forEach(function(comment) {\r",
                      "        pm.expect(comment).to.be.an('object');\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Each comment object has required properties\", function () {\r",
                      "    pm.response.json().forEach(function(comment) {\r",
                      "        pm.expect(comment).to.have.property('id');\r",
                      "        pm.expect(comment).to.have.property('text');\r",
                      "        pm.expect(comment).to.have.property('userId');\r",
                      "        pm.expect(comment).to.have.property('eventId');\r",
                      "        pm.expect(comment).to.have.property('isDeleted');\r",
                      "        pm.expect(comment).to.have.property('created');\r",
                      "        pm.expect(comment).to.have.property('updated');\r",
                      "    });\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/comments/events/1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "comments",
                    "events",
                    "1"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Негативные тесты",
          "item": [
            {
              "name": "(Юзер)Апдейт коммента несуществующим юзером",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "pm.test(\"Response is an object with message, reason, status, and timestamp properties\", function () {",
                      "    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('message', 'reason', 'status', 'timestamp');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/100000/comments/3",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "100000",
                    "comments",
                    "3"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(Юзер)Апдейт несуществующего комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(404);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an object with message, reason, status, and timestamp properties\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('message', 'reason', 'status', 'timestamp');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/1/comments/300000000",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "1",
                    "comments",
                    "300000000"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Добавление нового события",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    let event;\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"uid\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        event = rnd.getEvent(category.id);\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "\r",
                      "    pm.request.body.update({\r",
                      "        mode: 'raw',\r",
                      "        raw: JSON.stringify(event),\r",
                      "        options: { raw: { language: 'json' } }\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(201);  \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = JSON.parse(pm.request.body.raw);\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
                      "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                      "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                      "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                      "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
                      "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
                      "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
                      "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
                      "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}",
                      "description": "(Required) id текущего пользователя"
                    }
                  ]
                },
                "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
              },
              "response": []
            },
            {
              "name": "(Юзер)Апдейт удаленного комментария",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(409);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response is an object with message, reason, status, and timestamp properties\", function () {\r",
                      "    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('message', 'reason', 'status', 'timestamp');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"text\": \"Тестовый комментарий_25букв\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/{{uid}}/comments/1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    "{{uid}}",
                    "comments",
                    "1"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ]
}